<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>LeeCoder&#39;s Blog</title>
  
  <subtitle>Welcome</subtitle>
  <link href="/myblog/atom.xml" rel="self"/>
  
  <link href="http://67.216.192.123:4000/myblog/"/>
  <updated>2018-09-04T08:12:15.585Z</updated>
  <id>http://67.216.192.123:4000/myblog/</id>
  
  <author>
    <name>LeeCoder</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>nginx</title>
    <link href="http://67.216.192.123:4000/myblog/2018/09/02/yes-it-is/"/>
    <id>http://67.216.192.123:4000/myblog/2018/09/02/yes-it-is/</id>
    <published>2018-09-02T09:39:08.000Z</published>
    <updated>2018-09-04T08:12:15.585Z</updated>
    
    <content type="html"><![CDATA[<p>一：证书和私钥的生成<br>注意：一般生成的目录,应该放在nginx/conf/ssl目录<br>1.创建服务器证书密钥文件 server.key：<br>openssl genrsa -des3 -out server.key 1024<br>输入密码，确认密码，自己随便定义，但是要记住，后面会用到。<br>2.创建服务器证书的申请文件 server.csr<br>openssl req -new -key server.key -out server.csr<br>输出内容为：<br>Enter pass phrase for root.key: ← 输入前面创建的密码<br>Country Name (2 letter code) [AU]:CN ← 国家代号，中国输入CN<br>State or Province Name (full name) [Some-State]:BeiJing ← 省的全名，拼音<br>Locality Name (eg, city) []:BeiJing ← 市的全名，拼音<br>Organization Name (eg, company) [Internet Widgits Pty Ltd]:MyCompany Corp. ← 公司英文名<br>Organizational Unit Name (eg, section) []: ← 可以不输入<br>Common Name (eg, YOUR name) []: ← 此时不输入<br>Email Address []:<a href="mailto:admin@mycompany.com" target="_blank" rel="noopener">admin@mycompany.com</a> ← 电子邮箱，可随意填<br>Please enter the following ‘extra’ attributes<br>to be sent with your certificate request<br>A challenge password []: ← 可以不输入<br>An optional company name []: ← 可以不输入<br>4.备份一份服务器密钥文件<br>cp server.key server.key.org<br>5.去除文件口令<br>openssl rsa -in server.key.org -out server.key<br>6.生成证书文件server.crt<br>openssl x509 -req -days 365 -in server.csr -signkey server.key -out server.crt<br>二：开始Nginx的SSL模块<br>1.1 Nginx如果未开启SSL模块，配置Https时提示错误<br>原因也很简单，nginx缺少http_ssl_module模块，编译安装的时候带上–with-http_ssl_module配置就行了，但是现在的情况是我的nginx已经安装过了，怎么添加模块，其实也很简单，往下看： 做个说明：我的nginx的安装目录是/usr/local/nginx这个目录，我的源码包在/usr/local/src/nginx-1.6.2目录</p><p>nginx: [emerg] the “ssl” parameter requires ngx_http_ssl_module in /usr/local/nginx/conf/nginx.conf:37<br>1.2 Nginx开启SSL模块<br>切换到源码包：</p><p>cd /usr/local/src/nginx-1.11.3<br>查看nginx原有的模块</p><p>/usr/local/nginx/sbin/nginx -V<br>在configure arguments:后面显示的原有的configure参数如下：</p><p>–prefix=/usr/local/nginx –with-http_stub_status_module<br>那么我们的新配置信息就应该这样写：</p><p>./configure –prefix=/usr/local/nginx –with-http_stub_status_module –with-http_ssl_module<br>运行上面的命令即可，等配置完</p><p>配置完成后，运行命令</p><p>make<br>这里不要进行make install，否则就是覆盖安装,这里如果不需要原来的nginx可以直接make install</p><p>然后备份原有已安装好的nginx</p><p>cp /usr/local/nginx/sbin/nginx /usr/local/nginx/sbin/nginx.bak<br>然后将刚刚编译好的nginx覆盖掉原有的nginx（这个时候nginx要停止状态）</p><p>cp ./objs/nginx /usr/local/nginx/sbin/<br>然后启动nginx，仍可以通过命令查看是否已经加入成功</p><p>/usr/local/nginx/sbin/nginx -V　<br>Nginx 配置Http和Https共存</p><p>server {<br>            listen 80 default backlog=2048;<br>            listen 443 ssl;<br>            server_name wosign.com;<br>            root /var/www/html;</p><pre><code>    ssl_certificate /usr/local/Tengine/sslcrt/ wosign.com.crt;    ssl_certificate_key /usr/local/Tengine/sslcrt/ wosign.com .Key;}</code></pre><p>把ssl on；这行去掉，ssl写在443端口后面。这样http和https的链接都可以用</p><p>Nginx SSL性能调优<br>        ssl_certificate      server.crt;<br>        ssl_certificate_key  server.key;<br>        ssl_session_timeout  5m;<br>        ssl_session_cache shared:SSL:10m;<br>        ssl_protocols  SSLv2 SSLv3 TLSv1;<br>        ssl_ciphers ECDHE-RSA-AES256-SHA384:AES256-SHA256:RC4:HIGH:!MD5:!aNULL:!eNULL:!NULL:!DH:!EDH:!AESGCM;<br>        ssl_prefer_server_ciphers   on;<br>附录：<br>1.环境变量的配置<br>  打开 /etc/profile 在最底下加入export PATH=”/usr/local/nginx/sbin:$PATH”，然后执行source /etc/profile生效<br>2.一些常用操作<br>ps -ef 查看所有进程<br>ps -ef | grep nginx 查看所有nginx进程<br>kill -9 ID 杀死进程<br>nginx 启动nginx<br>nginx -s stop 停止nginx<br>nginx -t 检查配置文件是否异常<br>nginx -s reload 重启nginx</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;一：证书和私钥的生成&lt;br&gt;注意：一般生成的目录,应该放在nginx/conf/ssl目录&lt;br&gt;1.创建服务器证书密钥文件 server.key：&lt;br&gt;openssl genrsa -des3 -out server.key 1024&lt;br&gt;输入密码，确认密码，自己随便
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Hello My World</title>
    <link href="http://67.216.192.123:4000/myblog/2018/08/23/hello-world/"/>
    <id>http://67.216.192.123:4000/myblog/2018/08/23/hello-world/</id>
    <published>2018-08-24T03:22:21.000Z</published>
    <updated>2018-08-25T09:27:49.450Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br><span class="line">or $ hexo s</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br><span class="line">or $ hexo g</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br><span class="line">or $ hexo d</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>解决hexo后台登录</title>
    <link href="http://67.216.192.123:4000/myblog/2018/08/23/time-flies/"/>
    <id>http://67.216.192.123:4000/myblog/2018/08/23/time-flies/</id>
    <published>2018-08-23T12:04:00.000Z</published>
    <updated>2018-09-02T09:36:46.881Z</updated>
    
    <content type="html"><![CDATA[<p>估计有好多朋友 和我一样，在最初部署成功hexo这个开源博客的时候，很高兴的用$ hexo server在服务上跑了起来</p><p>都遇到了 hexo 的进程无法一直常驻后台 ssh 一关，博客进程就死掉了。这可就扎心了，因为我们不可能一直本地开着ssh吧。</p><p>于是经过一番大肆搜索，官方说用$ hexo s &amp; 但是我在用的时候还是进程莫名奇妙的死掉了</p><p>今天给大家介绍一个方法 那就是 用pm2 来接管hexo的进程</p><p>开始操作<br>安装pm2</p><p>$ npm  install -g pm2<br>1<br>写一个执行脚本<br>在博客根目录下面创建一个hexo_run.js</p><p>//run<br>const { exec } = require(‘child_process’)<br>exec(‘hexo server’,(error, stdout, stderr) =&gt; {<br>        if(error){<br>                console.log(‘exec error: ${error}’)<br>                return<br>        }<br>        console.log(‘stdout: ${stdout}’);<br>        console.log(‘stderr: ${stderr}’);<br>})</p><p>运行脚本<br>在根目录下<br>pm2 start hexo_run.js<br>                                                      注：引用</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;估计有好多朋友 和我一样，在最初部署成功hexo这个开源博客的时候，很高兴的用$ hexo server在服务上跑了起来&lt;/p&gt;
&lt;p&gt;都遇到了 hexo 的进程无法一直常驻后台 ssh 一关，博客进程就死掉了。这可就扎心了，因为我们不可能一直本地开着ssh吧。&lt;/p&gt;
&lt;
      
    
    </summary>
    
    
      <category term="解决hexo后台登录" scheme="http://67.216.192.123:4000/myblog/tags/%E8%A7%A3%E5%86%B3hexo%E5%90%8E%E5%8F%B0%E7%99%BB%E5%BD%95/"/>
    
  </entry>
  
  <entry>
    <title>mysql cast和convert函数使用</title>
    <link href="http://67.216.192.123:4000/myblog/2018/08/23/%E6%B2%A1%E9%94%99%EF%BC%8C%E8%BF%99%E5%B0%B1%E6%98%AF%E7%AC%AC%E4%B8%80%E6%9D%A1%E5%8D%9A%E5%AE%A2/"/>
    <id>http://67.216.192.123:4000/myblog/2018/08/23/没错，这就是第一条博客/</id>
    <published>2018-08-23T09:12:00.000Z</published>
    <updated>2018-08-27T07:30:12.048Z</updated>
    
    <content type="html"><![CDATA[<p>用CAST函数或者CONVERT</p><p>CAST(expr   AS   type),   CONVERT(expr,type)   ,   CONVERT(expr   USING   transcoding_name)  </p><p>CAST()   和CONVERT()   函数可用来获取一个类型的值，并产生另一个类型的值。  </p><p>这个类型   可以是以下值其中的   一个：<br>BINARY[(N)]<br>CHAR[(N)]<br>DATE<br>DATETIME<br>DECIMAL<br>SIGNED   [INTEGER]<br>TIME<br>UNSIGNED   [INTEGER]</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;用CAST函数或者CONVERT&lt;/p&gt;
&lt;p&gt;CAST(expr   AS   type),   CONVERT(expr,type)   ,   CONVERT(expr   USING   transcoding_name)  &lt;/p&gt;
&lt;p&gt;CAST()   和CO
      
    
    </summary>
    
    
  </entry>
  
</feed>

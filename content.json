[{"title":"nginx","date":"2018-09-02T09:39:08.000Z","path":"2018/09/02/yes-it-is/","text":"一：证书和私钥的生成注意：一般生成的目录,应该放在nginx/conf/ssl目录1.创建服务器证书密钥文件 server.key：openssl genrsa -des3 -out server.key 1024输入密码，确认密码，自己随便定义，但是要记住，后面会用到。2.创建服务器证书的申请文件 server.csropenssl req -new -key server.key -out server.csr输出内容为：Enter pass phrase for root.key: ← 输入前面创建的密码Country Name (2 letter code) [AU]:CN ← 国家代号，中国输入CNState or Province Name (full name) [Some-State]:BeiJing ← 省的全名，拼音Locality Name (eg, city) []:BeiJing ← 市的全名，拼音Organization Name (eg, company) [Internet Widgits Pty Ltd]:MyCompany Corp. ← 公司英文名Organizational Unit Name (eg, section) []: ← 可以不输入Common Name (eg, YOUR name) []: ← 此时不输入Email Address []:admin@mycompany.com ← 电子邮箱，可随意填Please enter the following ‘extra’ attributesto be sent with your certificate requestA challenge password []: ← 可以不输入An optional company name []: ← 可以不输入4.备份一份服务器密钥文件cp server.key server.key.org5.去除文件口令openssl rsa -in server.key.org -out server.key6.生成证书文件server.crtopenssl x509 -req -days 365 -in server.csr -signkey server.key -out server.crt二：开始Nginx的SSL模块1.1 Nginx如果未开启SSL模块，配置Https时提示错误原因也很简单，nginx缺少http_ssl_module模块，编译安装的时候带上–with-http_ssl_module配置就行了，但是现在的情况是我的nginx已经安装过了，怎么添加模块，其实也很简单，往下看： 做个说明：我的nginx的安装目录是/usr/local/nginx这个目录，我的源码包在/usr/local/src/nginx-1.6.2目录 nginx: [emerg] the “ssl” parameter requires ngx_http_ssl_module in /usr/local/nginx/conf/nginx.conf:371.2 Nginx开启SSL模块切换到源码包： cd /usr/local/src/nginx-1.11.3查看nginx原有的模块 /usr/local/nginx/sbin/nginx -V在configure arguments:后面显示的原有的configure参数如下： –prefix=/usr/local/nginx –with-http_stub_status_module那么我们的新配置信息就应该这样写： ./configure –prefix=/usr/local/nginx –with-http_stub_status_module –with-http_ssl_module运行上面的命令即可，等配置完 配置完成后，运行命令 make这里不要进行make install，否则就是覆盖安装,这里如果不需要原来的nginx可以直接make install 然后备份原有已安装好的nginx cp /usr/local/nginx/sbin/nginx /usr/local/nginx/sbin/nginx.bak然后将刚刚编译好的nginx覆盖掉原有的nginx（这个时候nginx要停止状态） cp ./objs/nginx /usr/local/nginx/sbin/然后启动nginx，仍可以通过命令查看是否已经加入成功 /usr/local/nginx/sbin/nginx -V Nginx 配置Http和Https共存 server { listen 80 default backlog=2048; listen 443 ssl; server_name wosign.com; root /var/www/html; ssl_certificate /usr/local/Tengine/sslcrt/ wosign.com.crt; ssl_certificate_key /usr/local/Tengine/sslcrt/ wosign.com .Key; } 把ssl on；这行去掉，ssl写在443端口后面。这样http和https的链接都可以用 Nginx SSL性能调优 ssl_certificate server.crt; ssl_certificate_key server.key; ssl_session_timeout 5m; ssl_session_cache shared:SSL:10m; ssl_protocols SSLv2 SSLv3 TLSv1; ssl_ciphers ECDHE-RSA-AES256-SHA384:AES256-SHA256:RC4:HIGH:!MD5:!aNULL:!eNULL:!NULL:!DH:!EDH:!AESGCM; ssl_prefer_server_ciphers on;附录：1.环境变量的配置 打开 /etc/profile 在最底下加入export PATH=”/usr/local/nginx/sbin:$PATH”，然后执行source /etc/profile生效2.一些常用操作ps -ef 查看所有进程ps -ef | grep nginx 查看所有nginx进程kill -9 ID 杀死进程nginx 启动nginxnginx -s stop 停止nginxnginx -t 检查配置文件是否异常nginx -s reload 重启nginx","tags":[]},{"title":"Hello My World","date":"2018-08-24T03:22:21.000Z","path":"2018/08/23/hello-world/","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server12$ hexo serveror $ hexo s More info: Server Generate static files12$ hexo generateor $ hexo g More info: Generating Deploy to remote sites12$ hexo deployor $ hexo d More info: Deployment","tags":[]},{"title":"解决hexo后台登录","date":"2018-08-23T12:04:00.000Z","path":"2018/08/23/time-flies/","text":"估计有好多朋友 和我一样，在最初部署成功hexo这个开源博客的时候，很高兴的用$ hexo server在服务上跑了起来 都遇到了 hexo 的进程无法一直常驻后台 ssh 一关，博客进程就死掉了。这可就扎心了，因为我们不可能一直本地开着ssh吧。 于是经过一番大肆搜索，官方说用$ hexo s &amp; 但是我在用的时候还是进程莫名奇妙的死掉了 今天给大家介绍一个方法 那就是 用pm2 来接管hexo的进程 开始操作安装pm2 $ npm install -g pm21写一个执行脚本在博客根目录下面创建一个hexo_run.js //runconst { exec } = require(‘child_process’)exec(‘hexo server’,(error, stdout, stderr) =&gt; { if(error){ console.log(‘exec error: ${error}’) return } console.log(‘stdout: ${stdout}’); console.log(‘stderr: ${stderr}’);}) 运行脚本在根目录下pm2 start hexo_run.js 注：引用","tags":[{"name":"解决hexo后台登录","slug":"解决hexo后台登录","permalink":"http://67.216.192.123:4000/myblog/tags/解决hexo后台登录/"}]},{"title":"mysql cast和convert函数使用","date":"2018-08-23T09:12:00.000Z","path":"2018/08/23/没错，这就是第一条博客/","text":"用CAST函数或者CONVERT CAST(expr AS type), CONVERT(expr,type) , CONVERT(expr USING transcoding_name) CAST() 和CONVERT() 函数可用来获取一个类型的值，并产生另一个类型的值。 这个类型 可以是以下值其中的 一个：BINARY[(N)]CHAR[(N)]DATEDATETIMEDECIMALSIGNED [INTEGER]TIMEUNSIGNED [INTEGER]","tags":[]}]